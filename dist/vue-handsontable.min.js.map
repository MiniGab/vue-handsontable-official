{"version":3,"file":"vue-handsontable.min.js","sources":["../src/helpers.ts","../src/lib/lru/lru.js","../node_modules/vue-runtime-helpers/dist/normalize-component.mjs","../node_modules/vue-class-component/dist/vue-class-component.esm.js","../src/BaseEditorComponent.vue"],"sourcesContent":["import Vue, { VNode } from 'vue';\r\nimport Handsontable from 'handsontable';\r\nimport { HotTableProps, VueProps, EditorComponent } from './types';\r\n\r\nconst unassignedPropSymbol = Symbol('unassigned');\r\nlet bulkComponentContainer = null;\r\n\r\n/**\r\n * Rewrite the settings object passed to the watchers to be a clean array/object prepared to use within Handsontable config.\r\n *\r\n * @param {*} observerSettings Watcher object containing the changed data.\r\n * @returns {Object|Array}\r\n */\r\nexport function rewriteSettings(observerSettings): any[] | object {\r\n  const settingsType = Object.prototype.toString.call(observerSettings);\r\n  let settings: any[] | object | null = null;\r\n  let type: { array?: boolean, object?: boolean } = {};\r\n\r\n  if (settingsType === '[object Array]') {\r\n    settings = [];\r\n    type.array = true;\r\n\r\n  } else if (settingsType === '[object Object]') {\r\n    settings = {};\r\n    type.object = true;\r\n  }\r\n\r\n  if (type.array || type.object) {\r\n    for (const p in observerSettings) {\r\n      if (observerSettings.hasOwnProperty(p)) {\r\n        settings[p] = observerSettings[p];\r\n      }\r\n    }\r\n\r\n  } else {\r\n    settings = observerSettings;\r\n  }\r\n\r\n  return settings;\r\n}\r\n\r\n/**\r\n * Private method to ensure the table is not calling `updateSettings` after editing cells.\r\n * @private\r\n */\r\nexport function preventInternalEditWatch(component) {\r\n  component.hotInstance.addHook('beforeChange', () => {\r\n    component.__internalEdit = true;\r\n  });\r\n\r\n  component.hotInstance.addHook('beforeCreateRow', () => {\r\n    component.__internalEdit = true;\r\n  });\r\n\r\n  component.hotInstance.addHook('beforeCreateCol', () => {\r\n    component.__internalEdit = true;\r\n  });\r\n\r\n  component.hotInstance.addHook('beforeRemoveRow', () => {\r\n    component.__internalEdit = true;\r\n  });\r\n\r\n  component.hotInstance.addHook('beforeRemoveCol', () => {\r\n    component.__internalEdit = true;\r\n  });\r\n}\r\n\r\n/**\r\n * Generate an object containing all the available Handsontable properties and plugin hooks.\r\n *\r\n * @param {String} source Source for the factory (either 'HotTable' or 'HotColumn').\r\n * @returns {Object}\r\n */\r\nexport function propFactory(source): VueProps<HotTableProps> {\r\n  const registeredHooks: string[] = Handsontable.hooks.getRegistered();\r\n\r\n  let propSchema: VueProps<HotTableProps> = {};\r\n  Object.assign(propSchema, Handsontable.DefaultSettings);\r\n\r\n  for (let prop in propSchema) {\r\n    propSchema[prop] = {\r\n      default: unassignedPropSymbol\r\n    };\r\n  }\r\n\r\n  for (let i = 0; i < registeredHooks.length; i++) {\r\n    propSchema[registeredHooks[i]] = {\r\n      default: unassignedPropSymbol\r\n    };\r\n  }\r\n\r\n  propSchema.settings = {\r\n    default: unassignedPropSymbol\r\n  };\r\n\r\n  if (source === 'HotTable') {\r\n    propSchema.id = {\r\n      type: String,\r\n      default: 'hot-' + Math.random().toString(36).substring(5)\r\n    };\r\n\r\n    propSchema.wrapperRendererCacheSize = {\r\n      type: Number,\r\n      default: 3000\r\n    };\r\n  }\r\n\r\n  return propSchema;\r\n}\r\n\r\n/**\r\n * Filter out all of the unassigned props, and return only the one passed to the component.\r\n *\r\n * @param {Object} props Object containing all the possible props.\r\n * @returns {Object} Object containing only used props.\r\n */\r\nexport function filterPassedProps(props) {\r\n  const filteredProps: VueProps<HotTableProps> = {};\r\n  const columnSettingsProp = props['settings'];\r\n\r\n  if (columnSettingsProp !== unassignedPropSymbol) {\r\n    for (let propName in columnSettingsProp) {\r\n      if (columnSettingsProp.hasOwnProperty(propName) && columnSettingsProp[propName] !== unassignedPropSymbol) {\r\n        filteredProps[propName] = columnSettingsProp[propName];\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let propName in props) {\r\n    if (props.hasOwnProperty(propName) && propName !== 'settings' && props[propName] !== unassignedPropSymbol) {\r\n      filteredProps[propName] = props[propName];\r\n    }\r\n  }\r\n\r\n  return filteredProps;\r\n}\r\n\r\n/**\r\n * Prepare the settings object to be used as the settings for Handsontable, based on the props provided to the component.\r\n *\r\n * @param {HotTableProps} props The props passed to the component.\r\n * @param {Handsontable.GridSettings} currentSettings The current Handsontable settings.\r\n * @returns {Handsontable.GridSettings} An object containing the properties, ready to be used within Handsontable.\r\n */\r\nexport function prepareSettings(props: HotTableProps, currentSettings?: Handsontable.GridSettings): Handsontable.GridSettings {\r\n  const assignedProps: VueProps<HotTableProps> = filterPassedProps(props);\r\n  const hotSettingsInProps: {} = props.settings ? props.settings : assignedProps;\r\n  const additionalHotSettingsInProps: Handsontable.GridSettings = props.settings ? assignedProps : null;\r\n  const newSettings = {};\r\n\r\n  for (const key in hotSettingsInProps) {\r\n    if (\r\n      hotSettingsInProps.hasOwnProperty(key) &&\r\n      hotSettingsInProps[key] !== void 0 &&\r\n      ((currentSettings && key !== 'data') ? !simpleEqual(currentSettings[key], hotSettingsInProps[key]) : true)\r\n    ) {\r\n      newSettings[key] = hotSettingsInProps[key];\r\n    }\r\n  }\r\n\r\n  for (const key in additionalHotSettingsInProps) {\r\n    if (\r\n      additionalHotSettingsInProps.hasOwnProperty(key) &&\r\n      key !== 'id' &&\r\n      key !== 'settings' &&\r\n      key !== 'wrapperRendererCacheSize' &&\r\n      additionalHotSettingsInProps[key] !== void 0 &&\r\n      ((currentSettings && key !== 'data') ? !simpleEqual(currentSettings[key], additionalHotSettingsInProps[key]) : true)\r\n    ) {\r\n      newSettings[key] = additionalHotSettingsInProps[key];\r\n    }\r\n  }\r\n\r\n  return newSettings;\r\n}\r\n\r\n/**\r\n * Get the VNode element with the provided type attribute from the component slots.\r\n *\r\n * @param {Array} componentSlots Array of slots from a component.\r\n * @param {String} type Type of the child component. Either `hot-renderer` or `hot-editor`.\r\n * @returns {Object|null} The VNode of the child component (or `null` when nothing's found).\r\n */\r\nexport function findVNodeByType(componentSlots: VNode[], type: string): VNode {\r\n  let componentVNode: VNode = null;\r\n\r\n  componentSlots.every((slot, index) => {\r\n    if (slot.data && slot.data.attrs && slot.data.attrs[type] !== void 0) {\r\n      componentVNode = slot;\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  });\r\n\r\n  return componentVNode;\r\n}\r\n\r\n/**\r\n * Get all `hot-column` component instances from the provided children array.\r\n *\r\n * @param {Array} children Array of children from a component.\r\n * @returns {Array} Array of `hot-column` instances.\r\n */\r\nexport function getHotColumnComponents(children) {\r\n  return children.filter((child) => child.$options.name === 'HotColumn');\r\n}\r\n\r\n/**\r\n * Create an instance of the Vue Component based on the provided VNode.\r\n *\r\n * @param {Object} vNode VNode element to be turned into a component instance.\r\n * @param {Object} parent Instance of the component to be marked as a parent of the newly created instance.\r\n * @param {Object} props Props to be passed to the new instance.\r\n * @param {Object} data Data to be passed to the new instance.\r\n */\r\nexport function createVueComponent(vNode: VNode, parent: Vue, props: object, data: object): EditorComponent {\r\n  const ownerDocument = parent.$el ? parent.$el.ownerDocument : document;\r\n  const settings: object = {\r\n    propsData: props,\r\n    parent,\r\n    data\r\n  };\r\n\r\n  if (!bulkComponentContainer) {\r\n    bulkComponentContainer = ownerDocument.createElement('DIV');\r\n    bulkComponentContainer.id = 'vueHotComponents';\r\n\r\n    ownerDocument.body.appendChild(bulkComponentContainer);\r\n  }\r\n\r\n  const componentContainer = ownerDocument.createElement('DIV');\r\n  bulkComponentContainer.appendChild(componentContainer);\r\n\r\n  return (new (vNode.componentOptions as any).Ctor(settings)).$mount(componentContainer);\r\n}\r\n\r\n/**\r\n * Compare two objects using `JSON.stringify`.\r\n * *Note: * As it's using the stringify function to compare objects, the property order in both objects is\r\n * important. It will return `false` for the same objects, if they're defined in a different order.\r\n *\r\n * @param {object} objectA First object to compare.\r\n * @param {object} objectB Second object to compare.\r\n * @returns {boolean} `true` if they're the same, `false` otherwise.\r\n */\r\nfunction simpleEqual(objectA, objectB) {\r\n  if (typeof objectA === 'function' && typeof objectB === 'function') {\r\n    return ''+objectA === ''+objectB;\r\n  }\r\n\r\n  return JSON.stringify(objectA) === JSON.stringify(objectB);\r\n}\r\n","/**\r\n * A doubly linked list-based Least Recently Used (LRU) cache. Will keep most\r\n * recently used items while discarding least recently used items when its limit\r\n * is reached.\r\n *\r\n * Licensed under MIT. Copyright (c) 2010 Rasmus Andersson <http://hunch.se/>\r\n * See README.md for details.\r\n *\r\n * Illustration of the design:\r\n *\r\n *       entry             entry             entry             entry\r\n *       ______            ______            ______            ______\r\n *      | head |.newer => |      |.newer => |      |.newer => | tail |\r\n *      |  A   |          |  B   |          |  C   |          |  D   |\r\n *      |______| <= older.|______| <= older.|______| <= older.|______|\r\n *\r\n *  removed  <--  <--  <--  <--  <--  <--  <--  <--  <--  <--  <--  added\r\n */\r\n(function(g,f){\r\n  const e = typeof exports == 'object' ? exports : typeof g == 'object' ? g : {};\r\n  f(e);\r\n  if (typeof define == 'function' && define.amd) { define('lru', e); }\r\n})(this, function(exports) {\r\n\r\n  const NEWER = Symbol('newer');\r\n  const OLDER = Symbol('older');\r\n\r\n  function LRUMap(limit, entries) {\r\n    if (typeof limit !== 'number') {\r\n      // called as (entries)\r\n      entries = limit;\r\n      limit = 0;\r\n    }\r\n\r\n    this.size = 0;\r\n    this.limit = limit;\r\n    this.oldest = this.newest = undefined;\r\n    this._keymap = new Map();\r\n\r\n    if (entries) {\r\n      this.assign(entries);\r\n      if (limit < 1) {\r\n        this.limit = this.size;\r\n      }\r\n    }\r\n  }\r\n\r\n  exports.LRUMap = LRUMap;\r\n\r\n  function Entry(key, value) {\r\n    this.key = key;\r\n    this.value = value;\r\n    this[NEWER] = undefined;\r\n    this[OLDER] = undefined;\r\n  }\r\n\r\n\r\n  LRUMap.prototype._markEntryAsUsed = function(entry) {\r\n    if (entry === this.newest) {\r\n      // Already the most recenlty used entry, so no need to update the list\r\n      return;\r\n    }\r\n    // HEAD--------------TAIL\r\n    //   <.older   .newer>\r\n    //  <--- add direction --\r\n    //   A  B  C  <D>  E\r\n    if (entry[NEWER]) {\r\n      if (entry === this.oldest) {\r\n        this.oldest = entry[NEWER];\r\n      }\r\n      entry[NEWER][OLDER] = entry[OLDER]; // C <-- E.\r\n    }\r\n    if (entry[OLDER]) {\r\n      entry[OLDER][NEWER] = entry[NEWER]; // C. --> E\r\n    }\r\n    entry[NEWER] = undefined; // D --x\r\n    entry[OLDER] = this.newest; // D. --> E\r\n    if (this.newest) {\r\n      this.newest[NEWER] = entry; // E. <-- D\r\n    }\r\n    this.newest = entry;\r\n  };\r\n\r\n  LRUMap.prototype.assign = function(entries) {\r\n    let entry, limit = this.limit || Number.MAX_VALUE;\r\n    this._keymap.clear();\r\n    let it = entries[Symbol.iterator]();\r\n    for (let itv = it.next(); !itv.done; itv = it.next()) {\r\n      let e = new Entry(itv.value[0], itv.value[1]);\r\n      this._keymap.set(e.key, e);\r\n      if (!entry) {\r\n        this.oldest = e;\r\n      } else {\r\n        entry[NEWER] = e;\r\n        e[OLDER] = entry;\r\n      }\r\n      entry = e;\r\n      if (limit-- == 0) {\r\n        throw new Error('overflow');\r\n      }\r\n    }\r\n    this.newest = entry;\r\n    this.size = this._keymap.size;\r\n  };\r\n\r\n  LRUMap.prototype.get = function(key) {\r\n    // First, find our cache entry\r\n    var entry = this._keymap.get(key);\r\n    if (!entry) return; // Not cached. Sorry.\r\n    // As <key> was found in the cache, register it as being requested recently\r\n    this._markEntryAsUsed(entry);\r\n    return entry.value;\r\n  };\r\n\r\n  LRUMap.prototype.set = function(key, value) {\r\n    var entry = this._keymap.get(key);\r\n\r\n    if (entry) {\r\n      // update existing\r\n      entry.value = value;\r\n      this._markEntryAsUsed(entry);\r\n      return this;\r\n    }\r\n\r\n    // new entry\r\n    this._keymap.set(key, (entry = new Entry(key, value)));\r\n\r\n    if (this.newest) {\r\n      // link previous tail to the new tail (entry)\r\n      this.newest[NEWER] = entry;\r\n      entry[OLDER] = this.newest;\r\n    } else {\r\n      // we're first in -- yay\r\n      this.oldest = entry;\r\n    }\r\n\r\n    // add new entry to the end of the linked list -- it's now the freshest entry.\r\n    this.newest = entry;\r\n    ++this.size;\r\n    if (this.size > this.limit) {\r\n      // we hit the limit -- remove the head\r\n      this.shift();\r\n    }\r\n\r\n    return this;\r\n  };\r\n\r\n  LRUMap.prototype.shift = function() {\r\n    // todo: handle special case when limit == 1\r\n    var entry = this.oldest;\r\n    if (entry) {\r\n      if (this.oldest[NEWER]) {\r\n        // advance the list\r\n        this.oldest = this.oldest[NEWER];\r\n        this.oldest[OLDER] = undefined;\r\n      } else {\r\n        // the cache is exhausted\r\n        this.oldest = undefined;\r\n        this.newest = undefined;\r\n      }\r\n      // Remove last strong reference to <entry> and remove links from the purged\r\n      // entry being returned:\r\n      entry[NEWER] = entry[OLDER] = undefined;\r\n      this._keymap.delete(entry.key);\r\n      --this.size;\r\n      return [entry.key, entry.value];\r\n    }\r\n  };\r\n\r\n// ----------------------------------------------------------------------------\r\n// Following code is optional and can be removed without breaking the core\r\n// functionality.\r\n  LRUMap.prototype.has = function(key) {\r\n    return this._keymap.has(key);\r\n  };\r\n});\r\n","function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier /* server only */, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {\r\n    if (typeof shadowMode !== 'boolean') {\r\n        createInjectorSSR = createInjector;\r\n        createInjector = shadowMode;\r\n        shadowMode = false;\r\n    }\r\n    // Vue.extend constructor export interop.\r\n    const options = typeof script === 'function' ? script.options : script;\r\n    // render functions\r\n    if (template && template.render) {\r\n        options.render = template.render;\r\n        options.staticRenderFns = template.staticRenderFns;\r\n        options._compiled = true;\r\n        // functional template\r\n        if (isFunctionalTemplate) {\r\n            options.functional = true;\r\n        }\r\n    }\r\n    // scopedId\r\n    if (scopeId) {\r\n        options._scopeId = scopeId;\r\n    }\r\n    let hook;\r\n    if (moduleIdentifier) {\r\n        // server build\r\n        hook = function (context) {\r\n            // 2.3 injection\r\n            context =\r\n                context || // cached call\r\n                    (this.$vnode && this.$vnode.ssrContext) || // stateful\r\n                    (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext); // functional\r\n            // 2.2 with runInNewContext: true\r\n            if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\r\n                context = __VUE_SSR_CONTEXT__;\r\n            }\r\n            // inject component styles\r\n            if (style) {\r\n                style.call(this, createInjectorSSR(context));\r\n            }\r\n            // register component module identifier for async chunk inference\r\n            if (context && context._registeredComponents) {\r\n                context._registeredComponents.add(moduleIdentifier);\r\n            }\r\n        };\r\n        // used by ssr in case component is cached and beforeCreate\r\n        // never gets called\r\n        options._ssrRegister = hook;\r\n    }\r\n    else if (style) {\r\n        hook = shadowMode\r\n            ? function (context) {\r\n                style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));\r\n            }\r\n            : function (context) {\r\n                style.call(this, createInjector(context));\r\n            };\r\n    }\r\n    if (hook) {\r\n        if (options.functional) {\r\n            // register for functional component in vue file\r\n            const originalRender = options.render;\r\n            options.render = function renderWithStyleInjection(h, context) {\r\n                hook.call(context);\r\n                return originalRender(h, context);\r\n            };\r\n        }\r\n        else {\r\n            // inject component registration as beforeCreate hook\r\n            const existing = options.beforeCreate;\r\n            options.beforeCreate = existing ? [].concat(existing, hook) : [hook];\r\n        }\r\n    }\r\n    return script;\r\n}\n\nexport default normalizeComponent;\n//# sourceMappingURL=normalize-component.mjs.map\n","/**\n  * vue-class-component v7.2.6\n  * (c) 2015-present Evan You\n  * @license MIT\n  */\nimport Vue from 'vue';\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  }\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\n// The rational behind the verbose Reflect-feature check below is the fact that there are polyfills\n// which add an implementation for Reflect.defineMetadata but not for Reflect.getOwnMetadataKeys.\n// Without this check consumers will encounter hard to track down runtime errors.\nfunction reflectionIsSupported() {\n  return typeof Reflect !== 'undefined' && Reflect.defineMetadata && Reflect.getOwnMetadataKeys;\n}\nfunction copyReflectionMetadata(to, from) {\n  forwardMetadata(to, from);\n  Object.getOwnPropertyNames(from.prototype).forEach(function (key) {\n    forwardMetadata(to.prototype, from.prototype, key);\n  });\n  Object.getOwnPropertyNames(from).forEach(function (key) {\n    forwardMetadata(to, from, key);\n  });\n}\n\nfunction forwardMetadata(to, from, propertyKey) {\n  var metaKeys = propertyKey ? Reflect.getOwnMetadataKeys(from, propertyKey) : Reflect.getOwnMetadataKeys(from);\n  metaKeys.forEach(function (metaKey) {\n    var metadata = propertyKey ? Reflect.getOwnMetadata(metaKey, from, propertyKey) : Reflect.getOwnMetadata(metaKey, from);\n\n    if (propertyKey) {\n      Reflect.defineMetadata(metaKey, metadata, to, propertyKey);\n    } else {\n      Reflect.defineMetadata(metaKey, metadata, to);\n    }\n  });\n}\n\nvar fakeArray = {\n  __proto__: []\n};\nvar hasProto = fakeArray instanceof Array;\nfunction createDecorator(factory) {\n  return function (target, key, index) {\n    var Ctor = typeof target === 'function' ? target : target.constructor;\n\n    if (!Ctor.__decorators__) {\n      Ctor.__decorators__ = [];\n    }\n\n    if (typeof index !== 'number') {\n      index = undefined;\n    }\n\n    Ctor.__decorators__.push(function (options) {\n      return factory(options, key, index);\n    });\n  };\n}\nfunction mixins() {\n  for (var _len = arguments.length, Ctors = new Array(_len), _key = 0; _key < _len; _key++) {\n    Ctors[_key] = arguments[_key];\n  }\n\n  return Vue.extend({\n    mixins: Ctors\n  });\n}\nfunction isPrimitive(value) {\n  var type = _typeof(value);\n\n  return value == null || type !== 'object' && type !== 'function';\n}\nfunction warn(message) {\n  if (typeof console !== 'undefined') {\n    console.warn('[vue-class-component] ' + message);\n  }\n}\n\nfunction collectDataFromConstructor(vm, Component) {\n  // override _init to prevent to init as Vue instance\n  var originalInit = Component.prototype._init;\n\n  Component.prototype._init = function () {\n    var _this = this;\n\n    // proxy to actual vm\n    var keys = Object.getOwnPropertyNames(vm); // 2.2.0 compat (props are no longer exposed as self properties)\n\n    if (vm.$options.props) {\n      for (var key in vm.$options.props) {\n        if (!vm.hasOwnProperty(key)) {\n          keys.push(key);\n        }\n      }\n    }\n\n    keys.forEach(function (key) {\n      Object.defineProperty(_this, key, {\n        get: function get() {\n          return vm[key];\n        },\n        set: function set(value) {\n          vm[key] = value;\n        },\n        configurable: true\n      });\n    });\n  }; // should be acquired class property values\n\n\n  var data = new Component(); // restore original _init to avoid memory leak (#209)\n\n  Component.prototype._init = originalInit; // create plain data object\n\n  var plainData = {};\n  Object.keys(data).forEach(function (key) {\n    if (data[key] !== undefined) {\n      plainData[key] = data[key];\n    }\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!(Component.prototype instanceof Vue) && Object.keys(plainData).length > 0) {\n      warn('Component class must inherit Vue or its descendant class ' + 'when class property is used.');\n    }\n  }\n\n  return plainData;\n}\n\nvar $internalHooks = ['data', 'beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeDestroy', 'destroyed', 'beforeUpdate', 'updated', 'activated', 'deactivated', 'render', 'errorCaptured', 'serverPrefetch' // 2.6\n];\nfunction componentFactory(Component) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options.name = options.name || Component._componentTag || Component.name; // prototype props.\n\n  var proto = Component.prototype;\n  Object.getOwnPropertyNames(proto).forEach(function (key) {\n    if (key === 'constructor') {\n      return;\n    } // hooks\n\n\n    if ($internalHooks.indexOf(key) > -1) {\n      options[key] = proto[key];\n      return;\n    }\n\n    var descriptor = Object.getOwnPropertyDescriptor(proto, key);\n\n    if (descriptor.value !== void 0) {\n      // methods\n      if (typeof descriptor.value === 'function') {\n        (options.methods || (options.methods = {}))[key] = descriptor.value;\n      } else {\n        // typescript decorated data\n        (options.mixins || (options.mixins = [])).push({\n          data: function data() {\n            return _defineProperty({}, key, descriptor.value);\n          }\n        });\n      }\n    } else if (descriptor.get || descriptor.set) {\n      // computed properties\n      (options.computed || (options.computed = {}))[key] = {\n        get: descriptor.get,\n        set: descriptor.set\n      };\n    }\n  });\n  (options.mixins || (options.mixins = [])).push({\n    data: function data() {\n      return collectDataFromConstructor(this, Component);\n    }\n  }); // decorate options\n\n  var decorators = Component.__decorators__;\n\n  if (decorators) {\n    decorators.forEach(function (fn) {\n      return fn(options);\n    });\n    delete Component.__decorators__;\n  } // find super\n\n\n  var superProto = Object.getPrototypeOf(Component.prototype);\n  var Super = superProto instanceof Vue ? superProto.constructor : Vue;\n  var Extended = Super.extend(options);\n  forwardStaticMembers(Extended, Component, Super);\n\n  if (reflectionIsSupported()) {\n    copyReflectionMetadata(Extended, Component);\n  }\n\n  return Extended;\n}\nvar reservedPropertyNames = [// Unique id\n'cid', // Super Vue constructor\n'super', // Component options that will be used by the component\n'options', 'superOptions', 'extendOptions', 'sealedOptions', // Private assets\n'component', 'directive', 'filter'];\nvar shouldIgnore = {\n  prototype: true,\n  arguments: true,\n  callee: true,\n  caller: true\n};\n\nfunction forwardStaticMembers(Extended, Original, Super) {\n  // We have to use getOwnPropertyNames since Babel registers methods as non-enumerable\n  Object.getOwnPropertyNames(Original).forEach(function (key) {\n    // Skip the properties that should not be overwritten\n    if (shouldIgnore[key]) {\n      return;\n    } // Some browsers does not allow reconfigure built-in properties\n\n\n    var extendedDescriptor = Object.getOwnPropertyDescriptor(Extended, key);\n\n    if (extendedDescriptor && !extendedDescriptor.configurable) {\n      return;\n    }\n\n    var descriptor = Object.getOwnPropertyDescriptor(Original, key); // If the user agent does not support `__proto__` or its family (IE <= 10),\n    // the sub class properties may be inherited properties from the super class in TypeScript.\n    // We need to exclude such properties to prevent to overwrite\n    // the component options object which stored on the extended constructor (See #192).\n    // If the value is a referenced value (object or function),\n    // we can check equality of them and exclude it if they have the same reference.\n    // If it is a primitive value, it will be forwarded for safety.\n\n    if (!hasProto) {\n      // Only `cid` is explicitly exluded from property forwarding\n      // because we cannot detect whether it is a inherited property or not\n      // on the no `__proto__` environment even though the property is reserved.\n      if (key === 'cid') {\n        return;\n      }\n\n      var superDescriptor = Object.getOwnPropertyDescriptor(Super, key);\n\n      if (!isPrimitive(descriptor.value) && superDescriptor && superDescriptor.value === descriptor.value) {\n        return;\n      }\n    } // Warn if the users manually declare reserved properties\n\n\n    if (process.env.NODE_ENV !== 'production' && reservedPropertyNames.indexOf(key) >= 0) {\n      warn(\"Static property name '\".concat(key, \"' declared on class '\").concat(Original.name, \"' \") + 'conflicts with reserved property name of Vue internal. ' + 'It may cause unexpected behavior of the component. Consider renaming the property.');\n    }\n\n    Object.defineProperty(Extended, key, descriptor);\n  });\n}\n\nfunction Component(options) {\n  if (typeof options === 'function') {\n    return componentFactory(options);\n  }\n\n  return function (Component) {\n    return componentFactory(Component, options);\n  };\n}\n\nComponent.registerHooks = function registerHooks(keys) {\n  $internalHooks.push.apply($internalHooks, _toConsumableArray(keys));\n};\n\nexport default Component;\nexport { createDecorator, mixins };\n","<script lang=\"ts\">\r\n  import Vue from 'vue';\r\n  import Handsontable from 'handsontable';\r\n  import Component from 'vue-class-component';\r\n\r\n  @Component({})\r\n  class BaseEditorComponent extends Vue implements Handsontable._editors.Base {\r\n    name = 'BaseEditorComponent';\r\n    instance = null;\r\n    row = null;\r\n    col = null;\r\n    prop = null;\r\n    TD = null;\r\n    originalValue = null;\r\n    cellProperties = null;\r\n    state = null;\r\n    hot = null;\r\n\r\n    mounted() {\r\n      const _this = this;\r\n\r\n      this.$data.hotCustomEditorClass = function () {\r\n        const customEditorClass = class CustomEditor extends Handsontable.editors.BaseEditor implements Handsontable._editors.Base {\r\n          constructor(hotInstance, row, col, prop, TD, cellProperties) {\r\n            super(hotInstance, row, col, prop, TD, cellProperties);\r\n\r\n            _this.$data.hotCustomEditorInstance = this;\r\n          }\r\n\r\n          focus() {\r\n          }\r\n\r\n          getValue() {\r\n          }\r\n\r\n          setValue() {\r\n          }\r\n\r\n          open() {\r\n          }\r\n\r\n          close() {\r\n          }\r\n        } as any;\r\n\r\n        // Fill with the rest of the BaseEditorComponent methods\r\n        Object.getOwnPropertyNames(Handsontable.editors.BaseEditor.prototype).forEach(propName => {\r\n          if (propName === 'constructor') {\r\n            return;\r\n          }\r\n\r\n          customEditorClass.prototype[propName] = function (...args) {\r\n            return _this[propName].call(this, ...args);\r\n          }\r\n        });\r\n\r\n        return customEditorClass;\r\n      }();\r\n    }\r\n\r\n    // BaseEditorComponent methods:\r\n    private _fireCallbacks(...args) {\r\n      (Handsontable.editors.BaseEditor.prototype as any)._fireCallbacks.call(this.$data.hotCustomEditorInstance, ...args);\r\n    }\r\n\r\n    beginEditing(...args) {\r\n      return Handsontable.editors.BaseEditor.prototype.beginEditing.call(this.$data.hotCustomEditorInstance, ...args);\r\n    }\r\n\r\n    cancelChanges(...args) {\r\n      return Handsontable.editors.BaseEditor.prototype.cancelChanges.call(this.$data.hotCustomEditorInstance, ...args);\r\n    }\r\n\r\n    checkEditorSection(...args) {\r\n      return Handsontable.editors.BaseEditor.prototype.checkEditorSection.call(this.$data.hotCustomEditorInstance, ...args);\r\n    }\r\n\r\n    close(...args) {\r\n      return Handsontable.editors.BaseEditor.prototype.close.call(this.$data.hotCustomEditorInstance, ...args);\r\n    }\r\n\r\n    discardEditor(...args) {\r\n      return Handsontable.editors.BaseEditor.prototype.discardEditor.call(this.$data.hotCustomEditorInstance, ...args);\r\n    }\r\n\r\n    enableFullEditMode(...args) {\r\n      return Handsontable.editors.BaseEditor.prototype.enableFullEditMode.call(this.$data.hotCustomEditorInstance, ...args);\r\n    }\r\n\r\n    extend(...args) {\r\n      return Handsontable.editors.BaseEditor.prototype.extend.call(this.$data.hotCustomEditorInstance, ...args);\r\n    }\r\n\r\n    finishEditing(...args) {\r\n      return Handsontable.editors.BaseEditor.prototype.finishEditing.call(this.$data.hotCustomEditorInstance, ...args);\r\n    }\r\n\r\n    focus(...args) {\r\n      return Handsontable.editors.BaseEditor.prototype.focus.call(this.$data.hotCustomEditorInstance, ...args);\r\n    }\r\n\r\n    getValue(...args) {\r\n      return Handsontable.editors.BaseEditor.prototype.getValue.call(this.$data.hotCustomEditorInstance, ...args);\r\n    }\r\n\r\n    init(...args) {\r\n      return Handsontable.editors.BaseEditor.prototype.init.call(this.$data.hotCustomEditorInstance, ...args);\r\n    }\r\n\r\n    isInFullEditMode(...args) {\r\n      return Handsontable.editors.BaseEditor.prototype.isInFullEditMode.call(this.$data.hotCustomEditorInstance, ...args);\r\n    }\r\n\r\n    isOpened(...args) {\r\n      return Handsontable.editors.BaseEditor.prototype.isOpened.call(this.$data.hotCustomEditorInstance, ...args);\r\n    }\r\n\r\n    isWaiting(...args) {\r\n      return Handsontable.editors.BaseEditor.prototype.isWaiting.call(this.$data.hotCustomEditorInstance, ...args);\r\n    }\r\n\r\n    open(...args) {\r\n      return Handsontable.editors.BaseEditor.prototype.open.call(this.$data.hotCustomEditorInstance, ...args);\r\n    }\r\n\r\n    prepare(row, col, prop, TD, originalValue, cellProperties) {\r\n      this.$data.hotInstance = cellProperties.instance;\r\n      this.$data.row = row;\r\n      this.$data.col = col;\r\n      this.$data.prop = prop;\r\n      this.$data.TD = TD;\r\n      this.$data.originalValue = originalValue;\r\n      this.$data.cellProperties = cellProperties;\r\n\r\n      return Handsontable.editors.BaseEditor.prototype.prepare.call(this.$data.hotCustomEditorInstance, row, col, prop, TD, originalValue, cellProperties);\r\n    }\r\n\r\n    saveValue(...args) {\r\n      return Handsontable.editors.BaseEditor.prototype.saveValue.call(this.$data.hotCustomEditorInstance, ...args);\r\n    }\r\n\r\n    setValue(...args) {\r\n      return Handsontable.editors.BaseEditor.prototype.setValue.call(this.$data.hotCustomEditorInstance, ...args);\r\n    }\r\n\r\n    addHook(...args) {\r\n      return (Handsontable.editors.BaseEditor.prototype as any).addHook.call(this.$data.hotCustomEditorInstance, ...args);\r\n    }\r\n\r\n    removeHooksByKey(...args) {\r\n      return (Handsontable.editors.BaseEditor.prototype as any).removeHooksByKey.call(this.$data.hotCustomEditorInstance, ...args);\r\n    }\r\n\r\n    clearHooks(...args) {\r\n      return (Handsontable.editors.BaseEditor.prototype as any).clearHooks.call(this.$data.hotCustomEditorInstance, ...args);\r\n    }\r\n\r\n    getEditedCell(...args) {\r\n      return (Handsontable.editors.BaseEditor.prototype as any).getEditedCell.call(this.$data.hotCustomEditorInstance, ...args);\r\n    }\r\n\r\n    getEditedCellsZIndex(...args) {\r\n      return (Handsontable.editors.BaseEditor.prototype as any).getEditedCellsZIndex.call(this.$data.hotCustomEditorInstance, ...args);\r\n    }\r\n\r\n    getEditedCellsLayerClass(...args) {\r\n      return (Handsontable.editors.BaseEditor.prototype as any).getEditedCellsLayerClass.call(this.$data.hotCustomEditorInstance, ...args);\r\n    }\r\n  }\r\n\r\n  export default BaseEditorComponent;\r\n  export { BaseEditorComponent };\r\n</script>\r\n"],"names":["component","propSchema","type","columnSettingsProp","filterPassedProps","key","hotSettingsInProps","newSettings","hasOwnProperty","appendChild","exports","prototype","this","newest","Entry","undefined","oldest","entry","it","NEWER","set","OLDER","entries","_keymap","iterator","itv","shift","createInjector","shadowMode","options","render","staticRenderFns","isFunctionalTemplate","context","$vnode","_registeredComponents","moduleIdentifier","__internalEdit","hotInstance","i","bulkComponentContainer","name","componentCacheKey","mountedComponent","editorCache","_typeof","Symbol","writable","arr","_arrayWithoutHoles","Object","getOwnPropertyNames","to","getOwnMetadata","collectDataFromConstructor","_init","_this","plainData","$internalHooks","indexOf","get","Super","shouldIgnore"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;i1EA2DIA,wJAKD,kCAgCCC,kBACEC,4LAqBEC,UAEFA,0NAyB2CC,aAK1C,IAAMC,OAEPC,gDAIAC,oHA4BJC,uEAEqBH,oKAmBE,wRA8ChBI,6WCrOR,+BAJA,CAAaC,mCAIIA,8GA8Bd,oBAKKC,oBACSC,KAAKC,4FAYZC,EAAAT,yDAGLU,eAEGJ,UAAUI,+DAQjBC,SACMC,KAAJD,uCAGeE,GAAfD,EAA8BE,cAEfC,IACTC,oBAEGR,8IAUTS,EAAiBC,OAALC,qDAGdV,aAAuBW,6EAUJF,qKAgBVN,iRAgCAM,mBAEQG,iBA/IQ,8CAsJnBd,YAANA,6NCtJF,0DAGQe,EAAiBC,uCAIiCC,mCAG1CC,kBACAC,iDAGJC,kBACqB,wCAYrBC,KAESrB,KAAKsB,uLAWVD,KAAmBE,uBACnBF,4BAAkCG,60DFiB9CnC,EAAUoC,kGAKFC,uCAAuC,WAC/CrC,EAAUoC,gBAAiBE,++BA4I3BC,+BAAsBC,gwCElOCC,eACnBC,oDAGAC,85BCyBR,SAASC,gJAOkBC,4EAO3B,iGAMMC,uBASN,qBAIA,YACE,iBAAkBC,GAAM,KACjB,qCAAyDT,cAE9D,UAPKU,KAWT,gIAIA,iBACQ,oEAMR,mGAGA,uBAEEC,oGA6BOC,8CACWC,UAIpB,yHAQyCC,qHAUzC,MAAgB,+BAUhB,SAASC,2CAIaC,qBACdC,qUAsC8BnD,cACzBA,KACPoD,gBAON,yLAEA,qFAEiB5B,gIAST6B,EAAeC,kBACItD,yQAqBHuD,wFAgBtB,mIAWIC,6EAUN,IAAIC,kDAOJ,uHASuEzD,0GA2B3C6C,kCAAuC7C,+BA1KhC,kuMC3InC;;;;;;;;;;;;;;;ADUA"}